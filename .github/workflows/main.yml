name: CargoHub Refactor Workflow

on:
  push:
    branches: 
      - main
      - Development
  pull_request:
    branches: 
      - main
      - Development

jobs:
  Build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.11.0'

      - name: Install pytest
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install requests

      - name: Restore dependencies
        run: |
          dotnet restore
        working-directory: CargoHubRefactor

      - name: Build
        run: dotnet build --no-restore
        working-directory: CargoHubRefactor

  Integration_Tests:
    runs-on: ubuntu-latest
    needs: Build  # Ensures the test job runs after the build job completes successfully

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment variables
        env:
          AdminApiToken: ${{ secrets.ADMINAPITOKEN }}
          EmployeeApiToken: ${{ secrets.EMPLOYEEAPITOKEN }}
          FloorManagerApiToken: ${{ secrets.FLOORMANAGERAPITOKEN }}
          WarehouseManagerToken: ${{ secrets.WAREHOUSEMANAGERTOKEN }}
        run: |
          printenv | grep 'ApiToken'
      
      - name: Debug exported variables
        run: printenv | grep 'ApiToken'

      - name: Install pytest
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install requests

      - name: Start ASP.NET application in background
        run: |
          nohup dotnet run > output.log &
        working-directory: CargoHubRefactor

      - name: Wait for ASP.NET application to start (health check)
        run: |
          echo "Waiting for ASP.NET application to start..."

          for i in {1..120}; do  # Retry every 5 seconds, up to 20 times (10 minutes total)
            if curl -s http://localhost:5000/api/health | grep "Healthy"; then
              echo "ASP.NET application is healthy!"
              break
            fi
            echo "Still waiting for ASP.NET application... (Attempt $i)"
            sleep 5
          done

          if ! curl -s http://localhost:5000/api/health | grep "Healthy"; then
            echo "Error: ASP.NET application is not healthy!"
            cat output.log
            exit 1
          fi

      - name: Run Python Integration Tests
        run: pytest
        working-directory: CargoHubRefactor/Tests

  Unit_Test_Coverage:
    runs-on: ubuntu-latest
    needs: Build

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x' # or your target version

    # Restore dependencies
    - name: Restore dependencies
      run: dotnet restore UnitTests/UnitTests.csproj
  

    # Build the project
    - name: Build
      run: dotnet build --no-restore --configuration Release UnitTests/UnitTests.csproj

    - name: Set environment variables
      env:
        AdminApiToken: ${{ secrets.ADMINAPITOKEN }}
        EmployeeApiToken: ${{ secrets.EMPLOYEEAPITOKEN }}
        FloorManagerApiToken: ${{ secrets.FLOORMANAGERAPITOKEN }}
        WarehouseManagerToken: ${{ secrets.WAREHOUSEMANAGERTOKEN }}
        EnvTestToken: ${{ secrets.ENVTESTTOKEN }}
      run: |
        printenv | grep 'ApiToken'
    
    # Run tests with Coverlet
    - name: Run tests and collect coverage
      # env: 
      #   EnvTestToken: RightEnvKey
        
      run: |
        dotnet test --no-build --configuration Release /p:CollectCoverage=true /p:CoverletOutput=coverage/ /p:CoverletOutputFormat=cobertura
      working-directory: UnitTests

    # Install ReportGenerator (optional, for readable reports)
    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
    
    - name: Install xmllint
      run: sudo apt-get update && sudo apt-get install -y libxml2-utils
    
    # Generate coverage report (optional)
    - name: Generate coverage report
      run: |
        reportgenerator -reports:coverage/coverage.cobertura.xml -targetdir:coverage-report -reporttypes:Html
      continue-on-error: true
      working-directory: UnitTests

    # Enforce coverage threshold
    - name: Check coverage threshold
      id: coverage-check
      run: |
        coverage=$(xmllint --xpath "string(//*[local-name()='coverage']/@line-rate)" coverage/coverage.cobertura.xml | awk '{printf("%.0f\n", $1 * 100)}')
        echo "Coverage: $coverage%"
        if [ "$coverage" -lt 70 ]; then
          echo "Code coverage ($coverage%) is below the threshold of 70%."
          exit 1
        fi
      working-directory: UnitTests

    # Upload coverage report (optional)
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage-report
      
